plugins {
    id 'java'
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'maven-publish'
	id 'jacoco'
	id 'checkstyle'
}

group = 'ru.vostrodymov.grader.v3'
version = '3.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
	targetCompatibility = '17'
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1")
}

dependencies {
    compileOnly "com.querydsl:querydsl-core:${queryDslVersion}"
    compileOnly "com.querydsl:querydsl-jpa:${queryDslVersion}"
    compileOnly "jakarta.persistence:jakarta.persistence-api"
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')

    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification // report is always generated after tests run
}



checkstyle {
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
    toolVersion = "${checkstyleVersion}"
    sourceSets = [sourceSets.main, sourceSets.test]
    maxWarnings = 0
    maxErrors = 0
    ignoreFailures = false
    reportsDir = file("$project.buildDir/reports/checkstyle")
    // Enabling | Disable code style check for tests
    checkstyleTest.enabled = true
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}